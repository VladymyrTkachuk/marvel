{"version":3,"file":"static/js/224.643d8fec.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\nimport setContent from \"../../utils/setContent\";\n\nconst RandomChar = (props) => {\n  const [char, setChar] = useState({});\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmet\"));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n  // }\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport \"./charList.scss\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmet\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      new Error(\"Unexpected process state\");\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEndet, setCharEndet] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess(\"confirmet\"));\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEndet((charEndet) => ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)} \n            key={item.id}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \" \" || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup\n          component={null}\n          appear={!newItemLoading}\n          enter={false}\n        >\n          {items}{\" \"}\n        </TransitionGroup>\n      </ul>\n    );\n  }\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n  }, [process]);\n  return (\n    <div className=\"char__list\">\n      {elements}\n\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{ display: charEndet ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmet\"));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is comics with this character\"}\n        {comics.map((item, i) => {\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacterByName, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  const errorMessage =\r\n    process === \"error\" ? (\r\n      <div className=\"char__search-critical-error\">\r\n        <ErrorMessage />\r\n      </div>\r\n    ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={process === \"loading\"}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information</title>\r\n      </Helmet>\r\n      <RandomChar />\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\"); //FSM ожидание\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setProcess(\"loading\");\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Coult not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n      // eslint-disable-next-line\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=dfcb4b32f15723cc105bc90c43b5f174\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      // optional chaining operator\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmet\": \r\n      return <Component data={data} />; \r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","props","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEndet","setCharEndet","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","TransitionGroup","component","appear","enter","renderItems","disabled","comics","_Fragment","charId","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","this","setState","render","CharSearchForm","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","decoration","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}